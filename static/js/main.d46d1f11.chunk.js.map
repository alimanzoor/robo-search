{"version":3,"sources":["components/SearchBox.js","components/Scroll.js","components/Card.js","components/CardList.js","containers/App.js","redux/actions.js","redux/constants.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["SearchBox","searchChange","className","onChange","placeholder","type","Scroll","props","children","Card","robot","name","id","email","src","alt","CardList","robots","map","i","key","connect","state","searchField","setSearchField","requestRobots","isPending","hasError","dispatch","onSearchChange","event","payload","target","value","onRequestRobots","fetch","then","response","json","data","catch","error","useEffect","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","initialSearchState","initialRobotsState","rootReducer","combineReducers","action","Object","assign","store","createStore","compose","applyMiddleware","thunkMiddleware","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d46d1f11.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input onChange={searchChange}\r\n             className=\"pa3 ba b--green bg-lightest-blue\"\r\n             placeholder=\"search robots\"\r\n             type=\"search\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div className=\"scroll\">\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Card = ({robot}) => {\r\n  const {name, id, email} = robot;\r\n  return (\r\n    <div className=\"tc grow bg-light-green br3 pa3 dib bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?150x150`} alt={name} />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {robots.map((robot, i) => <Card key={i} robot={robot} />)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;","import React, { useEffect } from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport CardList from '../components/CardList';\r\nimport { connect } from 'react-redux';\r\nimport { changeSearchField, requestRobots } from '../redux/actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.setSearchField.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    hasError: state.requestRobots.hasError\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(changeSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nconst App = ({robots, onRequestRobots, isPending, hasError, onSearchChange, searchField}) => {\r\n\r\n  useEffect(() => {\r\n    return onRequestRobots();\r\n  }, []);\r\n\r\n\r\n  const filteredRobots = robots.filter(robot => {\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n  })\r\n\r\n  if (isPending) {\r\n    return <div className=\"loading\">Loading...</div>\r\n  }\r\n  if (hasError) {\r\n    return <div className=\"hasError\">there is some error, try again later</div>\r\n  }\r\n  return (\r\n    <div className=\"App tc\">\r\n      <h1>Robo Friends</h1>\r\n      <SearchBox searchChange={onSearchChange} />\r\n      <Scroll>\r\n        <CardList robots={filteredRobots} />\r\n      </Scroll>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { REQUEST_ROBOT_FAILED, REQUEST_ROBOT_PENDING, REQUEST_ROBOT_SUCCESS, SEARCH_FIELD_CHANGE } from './constants';\r\n\r\nexport const changeSearchField = (text) => {\r\n  return {\r\n    type: SEARCH_FIELD_CHANGE,\r\n    payload: text\r\n  }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({type: REQUEST_ROBOT_PENDING})\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOT_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOT_FAILED, payload: error}))\r\n}\r\n","export const SEARCH_FIELD_CHANGE = 'SEARCH_FIELD_CHANGE';\r\nexport const REQUEST_ROBOT_PENDING = 'REQUEST_ROBOT_PENDING';\r\nexport const REQUEST_ROBOT_SUCCESS = 'REQUEST_ROBOT_SUCCESS';\r\nexport const REQUEST_ROBOT_FAILED = 'REQUEST_ROBOT_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { REQUEST_ROBOT_FAILED, REQUEST_ROBOT_PENDING, REQUEST_ROBOT_SUCCESS, SEARCH_FIELD_CHANGE } from './constants';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst initialSearchState = {\r\n  searchField: ''\r\n}\r\nconst setSearchField = (state = initialSearchState, action = {}) => {\r\n  switch (action.type) {\r\n    case SEARCH_FIELD_CHANGE:\r\n      return Object.assign({}, state, {searchField: action.payload});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialRobotsState = {\r\n  robots: [],\r\n  isPending: false,\r\n  hasError: false\r\n}\r\n\r\nexport const requestRobots = (state = initialRobotsState, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOT_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOT_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, hasError: false, isPending: false})\r\n    case REQUEST_ROBOT_FAILED:\r\n      return Object.assign({}, state, {error: action.payload, hasError: true, isPending: false})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const rootReducer = combineReducers({setSearchField, requestRobots});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { rootReducer } from './redux/reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunkMiddleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}